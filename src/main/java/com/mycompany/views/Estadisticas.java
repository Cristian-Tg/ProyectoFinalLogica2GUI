/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.views;

import Clases.Cliente;
import Clases.Contrato;
import controlador.ListaClientes;
import controlador.ListaContratos;
import controlador.ModeloCliente;
import controlador.ModeloContrato;
import java.awt.Color;
import javaswingdev.chart.ModelPieChart;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.HIDE_ON_CLOSE;

/**
 *
 * @author Acer
 */
public class Estadisticas extends javax.swing.JPanel {
    
    private ModeloCliente modeloCliente;
    private ModeloContrato modeloContrato;

    /**
     * Creates new form Estadisticas
     */
    public Estadisticas() {
        initComponents();
        modeloCliente = new ModeloCliente();
        modeloContrato = new ModeloContrato();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calcular = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnCalcular = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnCalcular1 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        calcular.setText("Calcular");
        calcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcularActionPerformed(evt);
            }
        });

        jLabel1.setText("Tipo de Cliente");

        jTextField1.setText("Ingrese la identificación");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextField1MousePressed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Residencial", "Industrial", "Hospitalario", "Público", "Bancario" }));

        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        jLabel2.setText("Servicos por cliente");

        jLabel3.setText("Servicios por sector");

        jButton1.setText("Ganancias");

        btnCalcular1.setText("Calcular");
        btnCalcular1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcular1ActionPerformed(evt);
            }
        });

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Responsable");

        jButton2.setText("Servicios");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 184, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnCalcular1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(99, 99, 99))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(calcular, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCalcular1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void calcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcularActionPerformed
        ModelPieChart[] modelos = porcentajeXTipoCliente();
        JFrame test = new Porcentajes(modelos);
        test.setDefaultCloseOperation(HIDE_ON_CLOSE);
        test.setVisible(true);
    }//GEN-LAST:event_calcularActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void btnCalcular1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcular1ActionPerformed
        String identificacion = jTextField1.getText();
        try {
            Cliente cliente = modeloCliente.obtener(identificacion);
            ModelPieChart[] modelos = porcentajeXCliente(cliente);
            JFrame test = new Porcentajes(modelos);
            test.setDefaultCloseOperation(HIDE_ON_CLOSE);
            test.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "El cliente no existe");
        }
    }//GEN-LAST:event_btnCalcular1ActionPerformed

    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        String sector = String.valueOf(this.jComboBox1.getSelectedItem());
        ModelPieChart[] modelos = serviciosxSector();
        JFrame test = new Porcentajes(modelos);
        test.setDefaultCloseOperation(HIDE_ON_CLOSE);
        test.setVisible(true);
    }//GEN-LAST:event_btnCalcularActionPerformed

    private void jTextField1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MousePressed
       if(jTextField1.getText().equals("Ingrese la identificación"))
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MousePressed

    private ModelPieChart[] porcentajeXTipoCliente() {
        int clientesNaturales = 0, clientesJuridicos = 0;
        ListaClientes clientes = modeloCliente.clientes;
        for (int i = 0; i < clientes.total(); i++) {
            Cliente cliente = clientes.obtener(i);
            if ("Natural".equals(cliente.getTipoCliente())) {
                clientesNaturales ++;
            }
            else if ("Juridico".equals(cliente.getTipoCliente())){
                clientesJuridicos ++;
            }
        }
        ModelPieChart modeloNatural = new ModelPieChart("Persona Natural", clientesNaturales, new Color(23, 126, 238));
        ModelPieChart modeloJuridico = new ModelPieChart("Persona Juridica", clientesJuridicos, new Color(221, 65, 65));
        ModelPieChart [] resultado = {modeloNatural, modeloJuridico};
        return resultado;
    }
    
    private ModelPieChart[] serviciosxSector() {
        int cantidadxResidencial = 0, cantidadxIndustrial = 0, cantidadxHospitalario = 0, cantidadxPublico = 0, cantidadxbancario = 0;
        ListaClientes clientes = modeloCliente.clientes;
        for (int i = 0; i < clientes.total(); i++) {
            Cliente cliente = clientes.obtener(i);
            String sector = cliente.getSector();
            int contratos = modeloContrato.filtrarCliente(cliente.getIdentificacion()).total();
            
            switch (sector) {
                case "Residencial":
                    cantidadxResidencial += contratos;
                    break;
                case "Industrial":
                    cantidadxIndustrial += contratos;
                    break;
                case "Hospitalario":
                    cantidadxHospitalario += contratos;
                    break;
                case "Publico":
                    cantidadxPublico += contratos;
                    break;
                case "Bancario":
                    cantidadxbancario += contratos;
                    break;
                default:
                    throw new AssertionError();
            }
        }
        ModelPieChart modeloResidencial = new ModelPieChart("Residencial", cantidadxResidencial, new Color(23, 126, 238));
        ModelPieChart modeloJuridico = new ModelPieChart("Industrial", cantidadxIndustrial, new Color(221, 65, 65));
        ModelPieChart modeloHospitalario = new ModelPieChart("Hospitalario", cantidadxHospitalario, new Color(47, 157, 64));
        ModelPieChart modeloPublico = new ModelPieChart("Publico", cantidadxPublico, new Color(196, 151, 58));
        ModelPieChart modeloBancario = new ModelPieChart("Bancario", cantidadxbancario, new Color(196, 50, 196));
        ModelPieChart [] resultado = { modeloResidencial, modeloJuridico, modeloHospitalario, modeloPublico, modeloBancario }; 
        return resultado;
    }
    
    private ModelPieChart[] porcentajeXCliente(Cliente cliente) {
        int serviciosBasicos = 0, serviciosAvanzados = 0, monitoreo = 0;
        ListaContratos contratos = modeloContrato.filtrarCliente(cliente.getIdentificacion());
        for (int i = 0; i < contratos.total(); i++) {
            Contrato contrato = contratos.obtener(i);
            String tipoServicio = contrato.getTipoDeServicio();
            
            switch (tipoServicio) {
                case "Servicio Basico":
                    serviciosBasicos++;
                    break;
                case "Servicio Avanzado":
                    serviciosAvanzados++;
                    break;
                case "Monitoreo":
                    monitoreo++;
                    break;
                default:
                    throw new AssertionError();
            }
            
        }
        ModelPieChart modeloBasico = new ModelPieChart("Servicio Basico", serviciosBasicos, new Color(23, 126, 238));
        ModelPieChart modeloAvanzado = new ModelPieChart("Servicio Avanzado", serviciosAvanzados, new Color(221, 65, 65));
        ModelPieChart modeloMonitoreo = new ModelPieChart("Monitoreo", monitoreo, new Color(47, 157, 64));
        ModelPieChart [] resultado = { modeloBasico, modeloAvanzado, modeloMonitoreo };
        return resultado;
    }
    
    private ModelPieChart[] serviciosXResponsable(String responsable) {
        int serviciosBasicos = 0, serviciosAvanzados = 0, monitoreo = 0;
        ListaContratos contratos = modeloContrato.contratos;
        for (int i = 0; i < contratos.total(); i++) {
            Contrato contrato = contratos.obtener(i);
            if (contrato.getServicio().getResponsable().equals(responsable)) {
                String tipoServicio = contrato.getTipoDeServicio();
            
                switch (tipoServicio) {
                    case "Servicio Basico":
                        serviciosBasicos++;
                        break;
                    case "Servicio Avanzado":
                        serviciosAvanzados++;
                        break;
                    case "Monitoreo":
                        monitoreo++;
                        break;
                    default:
                        throw new AssertionError();
                }
            } 
        }
        ModelPieChart modeloBasico = new ModelPieChart("Servicio Basico", serviciosBasicos, new Color(23, 126, 238));
        ModelPieChart modeloAvanzado = new ModelPieChart("Servicio Avanzado", serviciosAvanzados, new Color(221, 65, 65));
        ModelPieChart modeloMonitoreo = new ModelPieChart("Monitoreo", monitoreo, new Color(47, 157, 64));
        ModelPieChart [] resultado = { modeloBasico, modeloAvanzado, modeloMonitoreo };
        return resultado;
    }
    
    private ModelPieChart[] gananciasXResponsable(String responsable) {
        double serviciosBasicos = 0, serviciosAvanzados = 0, monitoreo = 0;
        ListaContratos contratos = modeloContrato.contratos;
        for (int i = 0; i < contratos.total(); i++) {
            Contrato contrato = contratos.obtener(i);
            if (contrato.getServicio().getResponsable().equals(responsable)) {
                String tipoServicio = contrato.getTipoDeServicio();
            
                switch (tipoServicio) {
                    case "Servicio Basico":
                        serviciosBasicos += contrato.getValorMensual();
                        break;
                    case "Servicio Avanzado":
                        serviciosAvanzados += contrato.getValorMensual();
                        break;
                    case "Monitoreo":
                        monitoreo += contrato.getValorMensual();
                        break;
                    default:
                        throw new AssertionError();
                }
            } 
        }
        ModelPieChart modeloBasico = new ModelPieChart("Servicio Basico", serviciosBasicos, new Color(23, 126, 238));
        ModelPieChart modeloAvanzado = new ModelPieChart("Servicio Avanzado", serviciosAvanzados, new Color(221, 65, 65));
        ModelPieChart modeloMonitoreo = new ModelPieChart("Monitoreo", monitoreo, new Color(47, 157, 64));
        ModelPieChart [] resultado = { modeloBasico, modeloAvanzado, modeloMonitoreo };
        return resultado;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnCalcular1;
    private javax.swing.JButton calcular;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
